{"version":3,"sources":["Components/custom-button/custom-button.component.jsx","Components/form-input-file/form-input-file.component.jsx","Components/form-input/form-input.component.jsx","Pages/Form/homepage/YeeForm.component.jsx","App.js","serviceWorker.js","index.js"],"names":["CustomButton","children","otherProps","className","FormInputFile","label","handelChange","name","type","onChange","htmlFor","FormInput","value","length","YeeFormPage","props","handleSubmit","event","preventDefault","fetch","method","headers","body","JSON","stringify","firstName","state","FirstName","lastName","LastName","emailId","emailid","phoneNumber","contact","imageData","image","then","res","setState","response","ok","HandleChange","target","handleFile","e","file","files","reader","FileReader","onloadend","result","readAsDataURL","action","this","onSubmit","required","accept","Component","defaultProps","PageNotFound","style","height","display","flexDirection","justifyContent","textAlign","App","CurrentUser","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b0083d57.chunk.js","sourcesContent":["import React from 'react'\r\nimport './custom-button.styles.css'\r\n\r\nconst CustomButton = ( { children, ...otherProps } ) => (\r\n    <button className=\"custom-button\" {...otherProps}>\r\n        {children}\r\n    </button>\r\n)\r\n\r\nexport default CustomButton","import React from 'react'\r\nimport './form-input-file.styles.css'\r\n\r\nconst FormInputFile = ({ label, handelChange, name, ...otherProps }) => (\r\n    <div className='group file-type' >\r\n        <label>\r\n            {label}\r\n        </label>\r\n        <div className=\"file-item\">\r\n        <input\r\n            type=\"file\"\r\n            name={name}\r\n            className='form-file-upload'\r\n            onChange={handelChange}\r\n            {...otherProps}\r\n        />\r\n        <label\r\n                htmlFor={name} \r\n            > Browse\r\n            </label>\r\n            </div>\r\n    </div>\r\n)\r\n\r\nexport default FormInputFile","import React from 'react'\r\nimport './form-input.styles.css'\r\n\r\nconst FormInput = ({ label, handelChange, ...otherProps }) => (\r\n    <div className='group'>\r\n        <input\r\n            className='form-input'\r\n            onChange={handelChange}\r\n            {...otherProps}\r\n        />\r\n        {\r\n            label ?\r\n            <label\r\n                className= {`${otherProps.value.length ? 'shrink' : ''} form-input-label`}\r\n            >\r\n                {label}\r\n            </label>\r\n            :\r\n            null\r\n        }\r\n    </div>\r\n)\r\n\r\nexport default FormInput","import React, { Component } from 'react';\r\nimport CustomButton from '../../../Components/custom-button/custom-button.component';\r\nimport FormInputFile from '../../../Components/form-input-file/form-input-file.component';\r\nimport FormInput from '../../../Components/form-input/form-input.component';\r\nimport './YeeForm.styles.css'\r\n\r\nclass YeeFormPage extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      FirstName: \"\",\r\n      LastName: \"\",\r\n      emailid: \"\",\r\n      contact: \"\",\r\n      image: null,\r\n      response: null\r\n    };\r\n  }\r\n\r\n  handleSubmit = event => {\r\n    event.preventDefault();\r\n\r\n      fetch('http://ec2-13-234-112-40.ap-south-1.compute.amazonaws.com:3000/insert-data', {\r\n        method: 'POST',\r\n          headers: {\r\n              'Accept': 'application/json',\r\n              'Content-Type': 'application/json'\r\n          },\r\n          body: JSON.stringify({\r\n            firstName: this.state.FirstName,\r\n            lastName: this.state.LastName,\r\n            emailId: this.state.emailid,\r\n            phoneNumber: this.state.contact,\r\n            imageData: this.state.image,\r\n          })\r\n      }).then( res=>  this.setState({response: res.ok === true ?'Your file is successfully inserted': res.ok === false ? \"there's some error\" :null}));\r\n  };\r\n\r\n  HandleChange = event => {\r\n    const { value, name } = event.target\r\n    this.setState({ [name]: value })\r\n  }\r\n\r\n  handleFile = (e) => {\r\n    e.preventDefault();\r\n\r\n    let file = e.target.files[0];\r\n    let reader = new FileReader();\r\n\r\n    if (e.target.files.length === 0) {\r\n      return;\r\n    }\r\n\r\n    reader.onloadend = (e) => {\r\n      this.setState({\r\n        image: [reader.result][0]\r\n      });\r\n    }\r\n    reader.readAsDataURL(file);\r\n  }\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"Form\">\r\n        <h2>Submit Your Details here:</h2>\r\n\r\n        <form\r\n          action={this.props.action}\r\n          method={this.props.method}\r\n          onSubmit={this.handleSubmit}\r\n        >\r\n          <FormInput\r\n            name=\"FirstName\"\r\n            type=\"text\"\r\n            value={this.state.FirstName}\r\n            onChange={this.HandleChange}\r\n            required\r\n            label='FirstName'\r\n          />\r\n          <FormInput\r\n            name=\"LastName\"\r\n            type=\"text\"\r\n            value={this.state.LastName}\r\n            onChange={this.HandleChange}\r\n            required\r\n            label='LastName'\r\n          />\r\n          <FormInput\r\n            name=\"emailid\"\r\n            type=\"email\"\r\n            value={this.state.emailid}\r\n            onChange={this.HandleChange}\r\n            required\r\n            label='Email-Id'\r\n          />\r\n          <FormInput\r\n            name=\"contact\"\r\n            type=\"number\"\r\n            value={this.state.contact}\r\n            onChange={this.HandleChange}\r\n            required\r\n            label='Phone Number'\r\n          />\r\n          <FormInputFile\r\n            name=\"image\"\r\n            type=\"file\"\r\n            accept=\"image/*\"\r\n            onChange={this.handleFile}\r\n            required\r\n            label=\"Image\"\r\n          />\r\n          <div className=\"buttons\">\r\n            <CustomButton name='submit' type='submit'> Submit </CustomButton>\r\n          </div>\r\n\r\n    <h2>{this.state.response}</h2>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// YeeFormPage.propTypes = { action: React.PropTypes.string.isRequired, method: React.PropTypes.string}\r\nYeeFormPage.defaultProps = {\r\n  action: 'http://192.168.1.4:3002/insert-data',\r\n  method: 'post'\r\n};\r\n\r\nexport default YeeFormPage","import React, {Component} from 'react';\nimport {Route, Switch} from 'react-router-dom'\nimport './App.css';\nimport YeeFormPage from './Pages/Form/homepage/YeeForm.component';\n\n\n\nconst PageNotFound = () => (\n  <div className=\"_404\" style={{height: '70vh', display:'flex', flexDirection:'column', justifyContent:'center',textAlign:'center'}}>\n    <h1 className=\"heading\">\n      SORRY TO SAY\n    </h1>\n    <h4 className=\"sub-heading\">\n      but the page You are looking has for went for a vacation.\n    </h4>\n  </div>\n)\n\n\n\nclass App extends Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      CurrentUser: null\n    }\n  }\n\n  render(){\n    return (\n      <div>\n        <Switch>\n          <Route exact path='/' component={YeeFormPage}  /> \n          <Route path='/' component={ PageNotFound } />\n        </Switch>\n      </div>\n    );\n  }\n}\n\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { BrowserRouter } from 'react-router-dom'\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}